# ui/backup_page.py
import os
import time
from pathlib import Path
from zipfile import ZipFile, ZIP_DEFLATED

import streamlit as st

# ========== Helpers ==========
def _human_bytes(n: int) -> str:
    for unit in ["B", "KB", "MB", "GB", "TB"]:
        if n < 1024:
            return f"{n:.2f} {unit}"
        n /= 1024
    return f"{n:.2f} PB"

def _is_hidden_path(parts) -> bool:
    # ·∫®n ki·ªÉu Unix: t√™n b·∫Øt ƒë·∫ßu b·∫±ng '.'
    return any(str(p).startswith(".") for p in parts)

def _should_skip_system_dir(rel_parts) -> bool:
    # B·ªè qua c√°c th∆∞ m·ª•c h·ªá th·ªëng l·ªõn/kh√≥ n√©n
    sys_dirs = {
        "System Volume Information",
        "$RECYCLE.BIN",
        "$Recycle.Bin",
        "Windows\\WinSxS",
        "Windows\\SoftwareDistribution",
    }
    joined = "\\".join(rel_parts)
    return any(sd.lower() in joined.lower() for sd in sys_dirs)

def _collect_files(src: Path, include_hidden: bool, skip_system_dirs: bool) -> list[Path]:
    files = []
    for p in src.rglob("*"):
        if p.is_file():
            rel = p.relative_to(src)
            parts = rel.parts
            if not include_hidden and _is_hidden_path(parts):
                continue
            if skip_system_dirs and _should_skip_system_dir(parts):
                continue
            files.append(p)
    return files

# ========== Page ==========
def render():
    st.subheader("1- Backup th∆∞ m·ª•c ‚ûú ZIP")

    col_a, col_b = st.columns(2)
    with col_a:
        src = st.text_input("Th∆∞ m·ª•c ngu·ªìn", placeholder=r"C:\Data\project")
        include_hidden = st.checkbox("Bao g·ªìm file/ th∆∞ m·ª•c ·∫©n (b·∫Øt ƒë·∫ßu b·∫±ng .)", value=False)
    with col_b:
        out_dir = st.text_input("Th∆∞ m·ª•c l∆∞u file .zip", placeholder=r"C:\Backups")
        custom_name = st.text_input("T√™n file (tu·ª≥ ch·ªçn, kh√¥ng c·∫ßn .zip)", placeholder="ƒë·ªÉ tr·ªëng s·∫Ω t·ª± sinh")
        skip_system_dirs = st.checkbox("B·ªè qua th∆∞ m·ª•c h·ªá th·ªëng (khuy√™n d√πng)", value=True)

    # N√∫t t·∫°o ZIP
    if st.button("T·∫°o file .zip", type="primary"):
        try:
            if not src or not out_dir:
                st.error("Vui l√≤ng nh·∫≠p **th∆∞ m·ª•c ngu·ªìn** v√† **th∆∞ m·ª•c l∆∞u**.")
                return

            src_path = Path(src).expanduser().resolve()
            out_path = Path(out_dir).expanduser().resolve()

            if not src_path.exists() or not src_path.is_dir():
                st.error(f"Th∆∞ m·ª•c ngu·ªìn kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ph·∫£i th∆∞ m·ª•c: {src_path}")
                return

            out_path.mkdir(parents=True, exist_ok=True)

            # T√™n file zip
            ts = time.strftime("%Y%m%d_%H%M%S")
            base_name = (custom_name.strip() or f"{src_path.name}_{ts}")
            if not base_name.lower().endswith(".zip"):
                base_name += ".zip"
            zip_path = out_path / base_name

            # Thu th·∫≠p file
            files = _collect_files(src_path, include_hidden, skip_system_dirs)
            total_files = len(files)
            total_bytes = sum(f.stat().st_size for f in files)

            if total_files == 0:
                st.warning("Th∆∞ m·ª•c ngu·ªìn kh√¥ng c√≥ file ƒë·ªÉ n√©n (ho·∫∑c ƒë√£ b·ªã l·ªçc).")
                return

            c1, c2, c3 = st.columns(3)
            c1.metric("S·ªë file", f"{total_files:,}")
            c2.metric("Dung l∆∞·ª£ng ∆∞·ªõc t√≠nh", _human_bytes(total_bytes))
            c3.write(f"**ƒê√≠ch:** `{zip_path}`")

            progress = st.progress(0)
            status = st.empty()

            # N√©n k√®m progress
            with ZipFile(zip_path, "w", compression=ZIP_DEFLATED) as zf:
                for i, f in enumerate(files, start=1):
                    zf.write(f, f.relative_to(src_path))
                    if i % 20 == 0 or i == total_files:
                        progress.progress(int(i * 100 / total_files))
                        status.write(f"ƒêang n√©n: `{f.relative_to(src_path)}` ({i}/{total_files})")

            progress.progress(100)
            status.write("‚úÖ Ho√†n t·∫•t n√©n.")
            st.success(f"ƒê√£ t·∫°o: {zip_path}")

            with open(zip_path, "rb") as fh:
                st.download_button(
                    label="üì• T·∫£i file ZIP",
                    data=fh,
                    file_name=zip_path.name,
                    mime="application/zip",
                    use_container_width=True,
                )

            if os.name == "nt":
                st.caption(f"M·∫πo: d√°n v√†o Explorer ƒë·ªÉ m·ªü nhanh th∆∞ m·ª•c: `{out_path}`")

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")
