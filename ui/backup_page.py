# ui/backup_page.py
from __future__ import annotations
import os
import re
import time
from pathlib import Path
from zipfile import ZipFile, ZIP_DEFLATED
import streamlit as st

# ===== Helpers =====
def _human_bytes(n: int) -> str:
    for unit in ["B", "KB", "MB", "GB", "TB"]:
        if n < 1024:
            return f"{n:.2f} {unit}"
        n /= 1024
    return f"{n:.2f} PB"

def _collect_all_files(src: Path) -> list[Path]:
    """Thu th·∫≠p to√†n b·ªô file trong th∆∞ m·ª•c (k·ªÉ c·∫£ file ·∫©n)."""
    return [p for p in src.rglob("*") if p.is_file()]

_WIN_DRIVE_RE = re.compile(r"^([A-Za-z]):[\\/](.*)$")

def _normalize_path_for_server(raw: str) -> tuple[Path, str, bool]:
    """
    Chu·∫©n ho√° ƒë∆∞·ªùng d·∫´n ng∆∞·ªùi d√πng nh·∫≠p sang ƒë∆∞·ªùng d·∫´n h·ª£p l·ªá tr√™n M√ÅY CH·∫†Y APP.
    Tr·∫£ v·ªÅ: (path, hint, is_win_drive_input)
    - Tr√™n Windows: tr·∫£ v·ªÅ Path(raw).
    - Tr√™n Linux/macOS: n·∫øu nh·∫≠p d·∫°ng 'E:\\something', th·ª≠ quy ƒë·ªïi sang /mnt/e/something, /media/e/something.
    """
    hint = ""
    if not raw:
        return Path(""), hint, False

    s = raw.strip().strip('"').strip("'")
    # Windows host
    if os.name == "nt":
        return Path(s).expanduser(), hint, False

    # POSIX host (Linux/macOS)
    m = _WIN_DRIVE_RE.match(s)
    if m:
        drv = m.group(1).lower()
        rest = m.group(2).replace("\\", "/").lstrip("/")
        candidates = [Path(f"/mnt/{drv}/{rest}"), Path(f"/media/{drv}/{rest}"), Path(f"/{drv}/{rest}")]
        for cand in candidates:
            if cand.exists():
                hint = f"ƒê√£ quy ƒë·ªïi t·ª´ `{s}` ‚Üí `{cand}`."
                return cand, hint, True
        # Kh√¥ng t√¨m th·∫•y, v·∫´n tr·∫£ v·ªÅ quy ƒë·ªïi m·∫∑c ƒë·ªãnh ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y ƒë∆∞·ªùng d·∫´n m·ª•c ti√™u
        cand = Path(f"/mnt/{drv}/{rest}")
        hint = f"ƒê√£ c·ªë quy ƒë·ªïi `{s}` ‚Üí `{cand}` nh∆∞ng kh√¥ng t√¨m th·∫•y tr√™n server."
        return cand, hint, True

    # POSIX path b√¨nh th∆∞·ªùng
    return Path(s).expanduser(), hint, False

# ===== Page =====
def render():
    st.subheader("1- Backup th∆∞ m·ª•c ‚ûú ZIP (nh·∫≠p ƒë∆∞·ªùng d·∫´n)")

    st.markdown("**Th∆∞ m·ª•c ngu·ªìn**")
    src_raw = st.text_input(
        " ", key="bk_src",
        placeholder=r"V√≠ d·ª•: C:\Data\project  ho·∫∑c  /home/user/data",
        label_visibility="collapsed",
    ).strip()

    st.markdown("**Th∆∞ m·ª•c ƒë√≠ch (n∆°i l∆∞u file .zip)**")
    dst_raw = st.text_input(
        "  ", key="bk_dst",
        placeholder=r"V√≠ d·ª•: C:\Backups  ho·∫∑c  /home/user/backups",
        label_visibility="collapsed",
    ).strip()

    # Chu·∫©n ho√° & g·ª£i √Ω
    src_path, src_hint, src_windrive = _normalize_path_for_server(src_raw)
    dst_path, dst_hint, dst_windrive = _normalize_path_for_server(dst_raw)
    if src_hint:
        st.caption(src_hint)
    if dst_hint:
        st.caption(dst_hint)

    # G·ª£i √Ω t√™n zip
    ts = time.strftime("%Y%m%d_%H%M%S")
    default_name = f"{(src_path.name or 'backup')}_{ts}" if src_path else ""
    coln1, coln2 = st.columns([3, 2])
    with coln1:
        zip_name = st.text_input("T√™n file ZIP (kh√¥ng c·∫ßn .zip)", value=default_name)
    with coln2:
        compress_level = st.select_slider(
            "M·ª©c n√©n (ZIP_DEFLATED)", options=[1, 3, 5, 7, 9], value=5,
            help="M·ª©c n√©n cao h∆°n th√¨ ch·∫≠m h∆°n, nh∆∞ng file nh·ªè h∆°n."
        )

    st.divider()
    show_preview = st.checkbox("Xem tr∆∞·ªõc danh s√°ch file & dung l∆∞·ª£ng ∆∞·ªõc t√≠nh", value=True)

    if st.button("üöÄ N√©n ngay", type="primary", use_container_width=True):
        try:
            if not src_raw or not dst_raw:
                st.error("Vui l√≤ng nh·∫≠p **th∆∞ m·ª•c ngu·ªìn** v√† **th∆∞ m·ª•c ƒë√≠ch**.")
                return

            # Ki·ªÉm tra t·ªìn t·∫°i th·ª±c t·∫ø
            if not src_path.exists() or not src_path.is_dir():
                # Th√¥ng b√°o th√¢n thi·ªán khi ng∆∞·ªùi d√πng nh·∫≠p ƒë∆∞·ªùng d·∫´n Windows nh∆∞ng server l√† Linux/Cloud
                if os.name != "nt" and _WIN_DRIVE_RE.match(src_raw):
                    st.error(
                        f"Th∆∞ m·ª•c ngu·ªìn kh√¥ng h·ª£p l·ªá tr√™n server: `{src_path}`.\n\n"
                        "B·∫°n ƒë√£ nh·∫≠p ƒë∆∞·ªùng d·∫´n **Windows** (vd. `E:\\...`) nh∆∞ng app ƒëang ch·∫°y tr√™n **Linux/Cloud**.\n"
                        "M√¨nh ƒë√£ th·ª≠ quy ƒë·ªïi sang d·∫°ng WSL (`/mnt/e/...`) nh∆∞ng kh√¥ng t√¨m th·∫•y.\n\n"
                        "**C√°ch x·ª≠ l√Ω:**\n"
                        "‚Ä¢ Ch·∫°y app tr√™n ch√≠nh m√°y Windows ƒë√≥ (localhost), ho·∫∑c\n"
                        "‚Ä¢ Mount th∆∞ m·ª•c Windows v√†o server (SMB/NFS/WSL), ho·∫∑c\n"
                        "‚Ä¢ N√©n th∆∞ m·ª•c th√†nh ZIP tr√™n m√°y b·∫°n r·ªìi **upload** l√™n th∆∞ m·ª•c ƒë√≠ch tr√™n server."
                    )
                else:
                    st.error(f"Th∆∞ m·ª•c ngu·ªìn kh√¥ng h·ª£p l·ªá: `{src_path}`")
                return

            # ƒê√≠ch: t·∫°o n·∫øu h·ª£p l·ªá (ch·ªâ t·∫°o ƒë∆∞·ª£c khi cha t·ªìn t·∫°i / c√≥ quy·ªÅn)
            try:
                dst_path.mkdir(parents=True, exist_ok=True)
            except Exception as e:
                st.error(f"Kh√¥ng t·∫°o ƒë∆∞·ª£c th∆∞ m·ª•c ƒë√≠ch: `{dst_path}`\nL√Ω do: {e}")
                return

            base = (zip_name.strip() or f"{src_path.name}_{ts}")
            if not base.lower().endswith(".zip"):
                base += ".zip"
            zip_path = (dst_path / base)

            # Thu th·∫≠p file
            files = _collect_all_files(src_path)
            if not files:
                st.warning("Th∆∞ m·ª•c ngu·ªìn kh√¥ng c√≥ file ƒë·ªÉ n√©n.")
                return

            total_bytes = sum(f.stat().st_size for f in files)
            c = st.columns(3)
            c[0].metric("S·ªë file", f"{len(files):,}")
            c[1].metric("Dung l∆∞·ª£ng ∆∞·ªõc t√≠nh", _human_bytes(total_bytes))
            c[2].write(f"**L∆∞u th√†nh:** `{zip_path}`")

            if show_preview:
                with st.expander("üìÇ Xem danh s√°ch file", expanded=False):
                    for f in files[:500]:
                        st.write(f"- {f.relative_to(src_path)}")
                    if len(files) > 500:
                        st.caption(f"... v√† {len(files) - 500} file n·ªØa")

            prog = st.progress(0)
            status = st.empty()

            # T·∫°o ZIP (compresslevel c√≥ th·ªÉ kh√¥ng h·ªó tr·ª£ tr√™n Python r·∫•t c≈©)
            try:
                zf = ZipFile(zip_path, "w", compression=ZIP_DEFLATED, compresslevel=compress_level)
            except TypeError:
                zf = ZipFile(zip_path, "w", compression=ZIP_DEFLATED)

            with zf as z:
                for i, f in enumerate(files, start=1):
                    z.write(f, f.relative_to(src_path))
                    if i % 20 == 0 or i == len(files):
                        prog.progress(int(i * 100 / len(files)))
                        status.write(f"ƒêang n√©n: `{f.relative_to(src_path)}` ({i}/{len(files)})")

            prog.progress(100)
            status.write("‚úÖ Ho√†n t·∫•t n√©n.")
            st.success(f"ƒê√£ t·∫°o: `{zip_path}`")

            # N√∫t t·∫£i v·ªÅ (n·∫øu client == server)
            try:
                with open(zip_path, "rb") as fh:
                    st.download_button(
                        "üì• T·∫£i file ZIP", fh, file_name=zip_path.name,
                        mime="application/zip", use_container_width=True
                    )
            except Exception:
                pass

            if os.name == "nt":
                st.caption(f"M·∫πo: d√°n ƒë∆∞·ªùng d·∫´n sau v√†o Explorer ƒë·ªÉ m·ªü nhanh: `{dst_path}`")

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")
