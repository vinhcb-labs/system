# ui/backup_page.py
from __future__ import annotations
import os, re, time
from pathlib import Path
from zipfile import ZipFile, ZIP_DEFLATED
import streamlit as st

# ---------- Helpers ----------
_DRIVE_PATH = re.compile(r"^[A-Za-z]:\\")  # C:\..., D:\...
_UNC_PATH   = re.compile(r"^\\\\")         # \\server\share\...

def _human_bytes(n: int) -> str:
    for unit in ["B", "KB", "MB", "GB", "TB"]:
        if n < 1024:
            return f"{n:.2f} {unit}"
        n /= 1024
    return f"{n:.2f} PB"

def _collect_all_files(src: Path) -> list[Path]:
    return [p for p in src.rglob("*") if p.is_file()]

def _norm_win_path(raw: str) -> Path:
    """
    Chu·∫©n h√≥a chu·ªói ƒë∆∞·ªùng d·∫´n Windows:
    - b·ªè quote, expand %ENV% v√† ~
    - ch·∫•p nh·∫≠n c·∫£ / v√† \ (ƒë·ªïi v·ªÅ \)
    - th√™m prefix \\?\ ƒë·ªÉ h·ªó tr·ª£ ƒë∆∞·ªùng d·∫´n d√†i (n·∫øu c√≥ th·ªÉ)
    """
    s = (raw or "").strip().strip('"').strip("'")
    if not s:
        return Path("")
    s = os.path.expandvars(s)
    s = os.path.expanduser(s)
    s = s.replace("/", "\\")

    # UNC: \\server\share\...
    if _UNC_PATH.match(s):
        long = "\\\\?\\UNC" + s[1:]          # -> \\?\UNC\server\share\...
        try:
            return Path(long)
        except Exception:
            return Path(s)

    # Drive: C:\..., D:\...
    if _DRIVE_PATH.match(s):
        long = "\\\\?\\" + s                 # -> \\?\C:\...
        try:
            return Path(long)
        except Exception:
            return Path(s)

    # T∆∞∆°ng ƒë·ªëi ho·∫∑c d·∫°ng kh√°c
    return Path(s)

# ---------- Page ----------
def render():
    st.subheader("1- Backup th∆∞ m·ª•c ‚ûú ZIP (Windows, nh·∫≠p ƒë∆∞·ªùng d·∫´n)")

    if os.name != "nt":
        st.error("M√°y ch·∫°y app hi·ªán **kh√¥ng ph·∫£i Windows**. Trang n√†y ch·ªâ d√πng khi ch·∫°y app tr√™n Windows.")
        return

    st.markdown("**Th∆∞ m·ª•c ngu·ªìn (VD: `E:\\Data\\Project`)**")
    src_raw = st.text_input(
        " ", key="bk_src_manual",
        placeholder=r"V√≠ d·ª•: C:\Data\Project  ho·∫∑c  E:\123",
        label_visibility="collapsed",
    ).strip()

    st.markdown("**Th∆∞ m·ª•c ƒë√≠ch (n∆°i l∆∞u file .zip, VD: `E:\\Backups`)**")
    dst_raw = st.text_input(
        "  ", key="bk_dst_manual",
        placeholder=r"V√≠ d·ª•: C:\Backups  ho·∫∑c  E:\Backups",
        label_visibility="collapsed",
    ).strip()

    # G·ª£i √Ω t√™n file zip
    ts = time.strftime("%Y%m%d_%H%M%S")
    default_name = f"{Path(src_raw).name}_{ts}" if src_raw else ""
    c1, c2 = st.columns([3, 2])
    with c1:
        zip_name = st.text_input("T√™n file ZIP (kh√¥ng c·∫ßn .zip)", value=default_name, key="zip_name_manual")
    with c2:
        compress_level = st.select_slider(
            "M·ª©c n√©n (ZIP_DEFLATED)", options=[1, 3, 5, 7, 9], value=5,
            help="M·ª©c n√©n cao h∆°n ‚Üí file nh·ªè h∆°n nh∆∞ng n√©n ch·∫≠m h∆°n."
        )

    st.divider()
    show_preview = st.checkbox("Xem tr∆∞·ªõc danh s√°ch file & dung l∆∞·ª£ng ∆∞·ªõc t√≠nh", value=True)

    # N√©n
    if st.button("üöÄ N√©n ngay", type="primary", use_container_width=True):
        try:
            if not src_raw or not dst_raw:
                st.error("Vui l√≤ng nh·∫≠p **th∆∞ m·ª•c ngu·ªìn** v√† **th∆∞ m·ª•c ƒë√≠ch**.")
                return

            src_path = _norm_win_path(src_raw)
            dst_dir  = _norm_win_path(dst_raw)

            # Ki·ªÉm tra t·ªìn t·∫°i (kh√¥ng d√πng resolve() ƒë·ªÉ tr√°nh bi·∫øn ƒë·ªïi k√Ω t·ª±)
            if not src_path.exists() or not src_path.is_dir():
                st.error(f"Th∆∞ m·ª•c ngu·ªìn kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i: `{src_raw}`")
                return

            try:
                dst_dir.mkdir(parents=True, exist_ok=True)
            except Exception as e:
                st.error(f"Kh√¥ng t·∫°o ƒë∆∞·ª£c th∆∞ m·ª•c ƒë√≠ch: `{dst_raw}`\nL√Ω do: {e}")
                return

            base = (zip_name.strip() or f"{src_path.name}_{ts}")
            if not base.lower().endswith(".zip"):
                base += ".zip"
            zip_path = dst_dir / base

            files = _collect_all_files(src_path)
            if not files:
                st.warning("Th∆∞ m·ª•c ngu·ªìn kh√¥ng c√≥ file ƒë·ªÉ n√©n.")
                return

            # Th·ªëng k√™
            try:
                total_bytes = sum(f.stat().st_size for f in files)
                size_str = _human_bytes(total_bytes)
            except Exception:
                total_bytes = 0
                size_str = "‚Äî"

            m1, m2, m3 = st.columns(3)
            m1.metric("S·ªë file", f"{len(files):,}")
            m2.metric("Dung l∆∞·ª£ng ∆∞·ªõc t√≠nh", size_str)
            m3.write(f"**L∆∞u th√†nh:** `{zip_path}`")

            if show_preview:
                with st.expander("üìÇ Xem danh s√°ch file", expanded=False):
                    for f in files[:500]:
                        st.write(f"- {f.relative_to(src_path)}")
                    if len(files) > 500:
                        st.caption(f"... v√† {len(files) - 500} file n·ªØa")

            # N√©n v·ªõi progress
            prog = st.progress(0)
            status = st.empty()
            try:
                zf = ZipFile(zip_path, "w", compression=ZIP_DEFLATED, compresslevel=compress_level)
            except TypeError:
                zf = ZipFile(zip_path, "w", compression=ZIP_DEFLATED)

            with zf as z:
                for i, f in enumerate(files, start=1):
                    z.write(f, f.relative_to(src_path))
                    if i % 20 == 0 or i == len(files):
                        prog.progress(int(i * 100 / len(files)))
                        status.write(f"ƒêang n√©n: `{f.relative_to(src_path)}` ({i}/{len(files)})")

            prog.progress(100)
            status.write("‚úÖ Ho√†n t·∫•t n√©n.")
            st.success(f"ƒê√£ t·∫°o: `{zip_path}`")

            # Cho t·∫£i v·ªÅ (n·∫øu b·∫°n ch·∫°y app & tr√¨nh duy·ªát tr√™n c√πng m√°y)
            try:
                with open(zip_path, "rb") as fh:
                    st.download_button(
                        "üì• T·∫£i file ZIP", fh, file_name=zip_path.name,
                        mime="application/zip", use_container_width=True
                    )
            except Exception:
                pass

            st.caption(f"M·ªü nhanh th∆∞ m·ª•c ƒë√≠ch: `{dst_dir}`")

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")
